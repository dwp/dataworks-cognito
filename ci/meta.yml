meta:
  plan:
    terraform-common-config:
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.terraform_repository))
            tag: ((dataworks.terraform_version))
        params:
          TF_INPUT: false
          TF_CLI_ARGS_apply: -lock-timeout=300s
          TF_CLI_ARGS_plan: -lock-timeout=300s
          TF_VAR_costcode: ((dataworks.costcode))
    terraform-bootstrap:
      task: terraform-bootstrap
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: dwpdigital/jinja-yaml-aws
            version: 0.0.19
            tag: 0.0.19
        run:
          path: sh
          args:
            - -exc
            - |
              python bootstrap_terraform.py
              cp terraform.tf ../terraform-bootstrap
          dir: dataworks-cognito
        inputs:
          - name: dataworks-cognito
        outputs:
          - name: terraform-bootstrap
      params:
        AWS_REGION: eu-west-2
    terraform-apply:
      task: terraform-apply
      .: (( inject meta.plan.terraform-common-config ))
      config:
        run:
          path: sh
          args:
            - -exc
            - |
              cp ../terraform-bootstrap/terraform.tf .
              terraform workspace show
              terraform init
              terraform plan -out terraform.plan
              terraform apply -auto-approve terraform.plan
          dir: dataworks-cognito
        inputs:
          - name: dataworks-cognito
          - name: terraform-bootstrap
    terraform-plan:
      task: terraform-plan
      .: (( inject meta.plan.terraform-common-config ))
      config:
        run:
          path: sh
          args:
            - -exc
            - |
              cp ../terraform-bootstrap/terraform.tf .
              terraform workspace show
              terraform init
              terraform plan $DETAILED_EXITCODE
          dir: dataworks-cognito
        inputs:
          - name: dataworks-cognito
          - name: terraform-bootstrap
      params:
        DETAILED_EXITCODE: -detailed-exitcode

    admin-reset-password:
      task: admin-reset-password
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.docker_awscli_repository))
            version: ((dataworks.docker_awscli_version))
            tag: ((dataworks.docker_awscli_version))
        params:
          AWS_DEFAULT_REGION: ((dataworks.aws_region))
          COGNITO_USER_POOL: concourse
          COGNITO_USERS_SECRET: /concourse/dataworks/concourse-cognito
        run:
          path: sh
          args:
            - -exc
            - |
              source /assume-role
              COGNITO_USER_POOL=$(aws cognito-idp list-user-pools --max-results 20 | jq -r --arg COGNITO_USER_POOL "$COGNITO_USER_POOL" '.UserPools[] | select(.Name | test($COGNITO_USER_POOL)) | .Id')
              aws secretsmanager get-secret-value --secret-id $COGNITO_USERS_SECRET --query SecretBinary --output text | base64 -d >> users.json
              aws cognito-idp list-users --user-pool-id $COGNITO_USER_POOL | jq -r '.Users[] | .Username' >> user.parse
              for COGNAME in $(cat users.json| jq -r '.Users[] | select(.reset | test("true")) | .username');
              do
                if [[ ! -z $(grep ${COGNAME} user.parse) ]]; then
                    aws cognito-idp admin-reset-user-password \
                    --user-pool-id $COGNITO_USER_POOL \
                    --username $COGNAME
                fi
              done

    create-users:
      task: create-users
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.docker_awscli_repository))
            version: ((dataworks.docker_awscli_version))
            tag: ((dataworks.docker_awscli_version))
        params:
          AWS_DEFAULT_REGION: ((dataworks.aws_region))
          COGNITO_USER_POOL: concourse
          COGNITO_USERS_SECRET: /concourse/dataworks/concourse-cognito
          NOTIFY: true
        run:
          path: sh
          args:
            - -exc
            - |
              source /assume-role
              COGNITO_USER_POOL=$(aws cognito-idp list-user-pools --max-results 20 | jq -r --arg COGNITO_USER_POOL "$COGNITO_USER_POOL" '.UserPools[] | select(.Name | test($COGNITO_USER_POOL)) | .Id')
              aws secretsmanager get-secret-value --secret-id $COGNITO_USERS_SECRET --query SecretBinary --output text | base64 -d >> users.json
              aws cognito-idp list-users --user-pool-id $COGNITO_USER_POOL | jq -r '.Users[] | .Username' >> user.parse
              for COGNAME in $(cat users.json| jq -r '.Users[] | select(.disabled | test("false")) | .username');
              do
                COGEMAIL=$(cat users.json| jq -r --arg COGNAME "$COGNAME" '.Users[] | select(.username | test($COGNAME)) | .email');
                COGPHONE=$(cat users.json| jq -r --arg COGNAME "$COGNAME" '.Users[] | select(.username | test($COGNAME)) | .phone');
                COGGROUPS=$(cat users.json| jq -r --arg COGNAME "$COGNAME" '.Users[] | select(.username | test($COGNAME)) | .groups[]');
                if [[ -z $(grep ${COGNAME} user.parse) ]]; then
                    aws cognito-idp admin-create-user \
                    --user-pool-id $COGNITO_USER_POOL \
                    --username $COGNAME \
                    --user-attributes Name=email,Value=$COGEMAIL Name=phone_number,Value=$COGPHONE Name=phone_number_verified,Value=true Name=email_verified,Value=true \
                    --desired-delivery-mediums EMAIL
                fi
                for COGGROUP in $COGGROUPS; do
                  aws cognito-idp admin-add-user-to-group \
                  --user-pool-id $COGNITO_USER_POOL \
                  --username $COGNAME \
                  --group-name $COGGROUP
                done
              done

    delete-users:
      task: delete-users
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.docker_awscli_repository))
            version: ((dataworks.docker_awscli_version))
            tag: ((dataworks.docker_awscli_version))
        params:
          AWS_DEFAULT_REGION: ((dataworks.aws_region))
          COGNITO_USER_POOL: concourse
          COGNITO_USERS_SECRET: /concourse/dataworks/concourse-cognito
        run:
          path: sh
          args:
            - -exc
            - |
              source /assume-role
              COGNITO_USER_POOL=$(aws cognito-idp list-user-pools --max-results 20 | jq -r --arg COGNITO_USER_POOL "$COGNITO_USER_POOL" '.UserPools[] | select(.Name | test($COGNITO_USER_POOL)) | .Id')
              aws secretsmanager get-secret-value --secret-id $COGNITO_USERS_SECRET --query SecretBinary --output text | base64 -d >> users.json
              aws cognito-idp list-users --user-pool-id $COGNITO_USER_POOL | jq -r '.Users[] | .Username' >> user.parse
              for COGNAME in $(cat users.json| jq -r '.Users[] | select(.disabled | test("true")) | .username');
              do
                if [[ ! -z $(grep ${COGNAME} user.parse) ]]; then
                    aws cognito-idp admin-delete-user \
                    --user-pool-id $COGNITO_USER_POOL \
                    --username $COGNAME
                fi
              done

